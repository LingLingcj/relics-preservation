<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ling.infrastructure.dao.IUserFavoriteDao">

    <resultMap id="BaseResultMap" type="com.ling.infrastructure.dao.po.UserFavorite">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="relics_id" property="relicsId" jdbcType="BIGINT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, username, relics_id, create_time, update_time, status
    </sql>

    <!-- 基础CRUD -->
    <insert id="insert" parameterType="com.ling.infrastructure.dao.po.UserFavorite" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user_favorites (username, relics_id, create_time, update_time, status)
        VALUES (#{username}, #{relicsId}, #{createTime}, #{updateTime}, #{status})
    </insert>

    <select id="selectById" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_favorites
        WHERE id = #{id}
    </select>

    <update id="update" parameterType="com.ling.infrastructure.dao.po.UserFavorite">
        UPDATE user_favorites
        SET username = #{username},
            relics_id = #{relicsId},
            update_time = #{updateTime},
            status = #{status}
        WHERE id = #{id}
    </update>

    <update id="deleteById">
        UPDATE user_favorites
        SET status = 1, update_time = NOW()
        WHERE id = #{id}
    </update>

    <!-- 业务查询 -->
    <select id="selectByUsernameAndRelicsId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_favorites
        WHERE username = #{username} AND relics_id = #{relicsId} AND status = 0
    </select>

    <select id="selectByUsername" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_favorites
        WHERE username = #{username} AND status = 0
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countByUsername" resultType="long">
        SELECT COUNT(1)
        FROM user_favorites
        WHERE username = #{username} AND status = 0
    </select>

    <select id="selectByRelicsId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_favorites
        WHERE relics_id = #{relicsId} AND status = 0
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <select id="countByRelicsId" resultType="long">
        SELECT COUNT(1)
        FROM user_favorites
        WHERE relics_id = #{relicsId} AND status = 0
    </select>

    <!-- 批量操作 -->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO user_favorites (username, relics_id, create_time, update_time, status)
        VALUES
        <foreach collection="list" item="item" separator=",">
            (#{item.username}, #{item.relicsId}, #{item.createTime}, #{item.updateTime}, #{item.status})
        </foreach>
    </insert>

    <select id="batchSelectByUsernameAndRelicsIds" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_favorites
        WHERE username = #{username} AND status = 0
        AND relics_id IN
        <foreach collection="relicsIds" item="relicsId" open="(" separator="," close=")">
            #{relicsId}
        </foreach>
    </select>

    <select id="batchCountByRelicsIds" resultType="com.ling.infrastructure.dao.IUserFavoriteDao$RelicsFavoriteCount">
        SELECT 
            uf.relics_id as relicsId,
            r.name as relicsName,
            COUNT(uf.id) as favoriteCount,
            MAX(uf.create_time) as lastFavoriteTime
        FROM user_favorites uf
        LEFT JOIN relics r ON uf.relics_id = r.relics_id
        WHERE uf.status = 0 AND uf.relics_id IN
        <foreach collection="relicsIds" item="relicsId" open="(" separator="," close=")">
            #{relicsId}
        </foreach>
        GROUP BY uf.relics_id, r.name
    </select>

    <!-- 统计查询 -->
    <select id="selectPopularRelics" resultType="com.ling.infrastructure.dao.IUserFavoriteDao$RelicsFavoriteCount">
        SELECT 
            uf.relics_id as relicsId,
            r.name as relicsName,
            COUNT(uf.id) as favoriteCount,
            MAX(uf.create_time) as lastFavoriteTime
        FROM user_favorites uf
        LEFT JOIN relics r ON uf.relics_id = r.relics_id
        WHERE uf.status = 0
        GROUP BY uf.relics_id, r.name
        ORDER BY favoriteCount DESC, lastFavoriteTime DESC
        LIMIT #{limit}
    </select>

    <select id="selectRecentlyFavoritedRelics" resultType="com.ling.infrastructure.dao.IUserFavoriteDao$RelicsFavoriteCount">
        SELECT 
            uf.relics_id as relicsId,
            r.name as relicsName,
            COUNT(uf.id) as favoriteCount,
            MAX(uf.create_time) as lastFavoriteTime
        FROM user_favorites uf
        LEFT JOIN relics r ON uf.relics_id = r.relics_id
        WHERE uf.status = 0 AND uf.create_time >= DATE_SUB(NOW(), INTERVAL 7 DAY)
        GROUP BY uf.relics_id, r.name
        ORDER BY lastFavoriteTime DESC
        LIMIT #{limit}
    </select>

    <select id="selectActiveUsers" resultType="com.ling.infrastructure.dao.IUserFavoriteDao$UserFavoriteCount">
        SELECT 
            username,
            COUNT(id) as favoriteCount,
            MAX(create_time) as lastFavoriteTime
        FROM user_favorites
        WHERE status = 0
        GROUP BY username
        ORDER BY favoriteCount DESC, lastFavoriteTime DESC
        LIMIT #{limit}
    </select>

    <select id="selectByTimeRange" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user_favorites
        WHERE status = 0
        <if test="username != null">
            AND username = #{username}
        </if>
        <if test="relicsId != null">
            AND relics_id = #{relicsId}
        </if>
        AND create_time BETWEEN #{startTime} AND #{endTime}
        ORDER BY create_time DESC
    </select>

</mapper>
